var documenterSearchIndex = {"docs":
[{"location":"#PreprocessingPipeline","page":"Home","title":"PreprocessingPipeline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BaseScaler\nStandardScaler\nMinMaxScaler\nMaxAbsScaler\nBaseNormalizer\nStandardNormalizer\nfit!\ntransform\ninverse_transform","category":"page"},{"location":"#PreprocessingPipeline.Preprocessing.Scaler.BaseScaler","page":"Home","title":"PreprocessingPipeline.Preprocessing.Scaler.BaseScaler","text":"BaseScaler\n\nIt is an abstract type for all scalers.\n\n\n\n\n\n","category":"type"},{"location":"#PreprocessingPipeline.Preprocessing.Scaler.StandardScaler","page":"Home","title":"PreprocessingPipeline.Preprocessing.Scaler.StandardScaler","text":"struct StandardScaler\n\nA structure representing a standard scaler.\nThe standard scaler standardizes features by removing the mean.\n\n# Fields\n- `mean::Union{Vector{Float64}, Float64, Nothing}`: Mean of the features.\n- `std::Union{Vector{Float64}, Float64, Nothing}`: Standard deviation of the features.\n\n\n\n\n\n","category":"type"},{"location":"#PreprocessingPipeline.Preprocessing.Scaler.MinMaxScaler","page":"Home","title":"PreprocessingPipeline.Preprocessing.Scaler.MinMaxScaler","text":"struct MinMaxScaler\n\nA structure representing a min-max scaler.\nThe min-max scaler scales features to a given range.\nThe range is defined by the `feature_range` parameter.\n\n# Fields\n- `feature_range::Tuple{<:Real, <:Real}`: The range to scale the features to.\n- `min::Union{Vector{<:Real}, <:Real, Nothing}`: Minimum value of the features.\n- `max::Union{Vector{<:Real}, <:Real, Nothing}`: Maximum value of the features.\n\n\n\n\n\n","category":"type"},{"location":"#PreprocessingPipeline.Preprocessing.Scaler.MaxAbsScaler","page":"Home","title":"PreprocessingPipeline.Preprocessing.Scaler.MaxAbsScaler","text":"MaxAbsScaler\n\nMax Abs Scaler is a scaler that scales the data using the maximum absolute value of the data.\n\n# Examples\n```julia\nscaler = MaxAbsScaler()\n```\n\n\n\n\n\n","category":"type"},{"location":"#PreprocessingPipeline.Preprocessing.Normalizers.BaseNormalizer","page":"Home","title":"PreprocessingPipeline.Preprocessing.Normalizers.BaseNormalizer","text":"BaseNormalizer     It is an abstract type for all normalizers.\n\n\n\n\n\n","category":"type"},{"location":"#PreprocessingPipeline.Preprocessing.Normalizers.StandardNormalizer","page":"Home","title":"PreprocessingPipeline.Preprocessing.Normalizers.StandardNormalizer","text":"StandardNormalizer\n\nStandard Normalizer is a normalizer that normalizes the data using the standard normalization technique.\n\n# Arguments\n- `type::String`: The type of normalization to apply. It can be one of the following:\n    - \"l1\": L1 normalization.\n    - \"l2\": L2 normalization.\n    - \"max\": Max normalization.\n\n# Examples\n```julia\nnormalizer = StandardNormalizer(\"l2\")\n```\n\n\n\n\n\n","category":"type"},{"location":"#PreprocessingPipeline.TransformerModule.fit!","page":"Home","title":"PreprocessingPipeline.TransformerModule.fit!","text":"fit!(transformer::Transformer, X::Matrix{Any})\n\nFits the transformer to the given data X. This method should be implemented for any concrete subtype of Transformer.\n\nArguments\n\ntransformer::Transformer: The transformer instance.\nX::Matrix{Any}: The input data to fit the transformer.\n\nReturns\n\nThe fitted transformer.\n\n\n\n\n\nfit!(scaler::StandardScaler, X::Vector{<:Real})\n\nFit the standard scaler to the data.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Vector{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `StandardScaler`.\n\n\n\n\n\nfit!(scaler::StandardScaler, X::Matrix{<:Real})\n\nFit the standard scaler to the data.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Matrix{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `StandardScaler`.\n\n\n\n\n\nfit!(scaler::MinMaxScaler, X::Vector{<:Real})\n\nFit the min-max scaler to the data.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Vector{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `MinMaxScaler`.\n\n\n\n\n\nfit!(scaler::MinMaxScaler, X::Matrix{<:Real})\n\nFit the min-max scaler to the data.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Matrix{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `MinMaxScaler`.\n\n\n\n\n\nfit!(scaler::MaxAbsScaler, X::Vector{<:Real})\n\nFit the max-abs scaler to the data.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Vector{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `MaxAbsScaler`.\n\n\n\n\n\nfit!(scaler::MaxAbsScaler, X::Matrix{<:Real})\n\nFit the max-abs scaler to the data.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Matrix{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `MaxAbsScaler`.\n\n\n\n\n\nfit!(normalizer::StandardNormalizer, X::Vector{<:Real})\n\nFit the normalizer to the data.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Vector{<:Real}`: The data to fit the normalizer.\n\n# Returns\nThe fitted `StandardNormalizer`.\n\n\n\n\n\nfit!(normalizer::StandardNormalizer, X::Matrix{<:Real})\n\nFit the normalizer to the data.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Matrix{<:Real}`: The data to fit the normalizer.\n\n# Returns\nThe fitted `StandardNormalizer`.\n\n\n\n\n\nfit!(pipeline::Pipeline, X::Matrix{Any})\n\nFit the pipeline to the input data by fitting each step sequentially. Updates the transformers in pipeline.named_steps with the results of their fit! method.\n\nArguments\n\npipeline::Pipeline: The pipeline to fit.\nX::Matrix{Any}: Input data matrix.\n\nReturns\n\nThe updated pipeline.\n\n\n\n\n\n","category":"function"},{"location":"#PreprocessingPipeline.TransformerModule.transform","page":"Home","title":"PreprocessingPipeline.TransformerModule.transform","text":"transform(transformer::Transformer, X::Matrix{Any})\n\nApplies the transformation defined by the transformer to the input data X. This method should be implemented for any concrete subtype of Transformer.\n\nArguments\n\ntransformer::Transformer: The transformer instance.\nX::Matrix{Any}: The input data to transform.\n\nReturns\n\nA transformed version of X.\n\n\n\n\n\ntransform(scaler::StandardScaler, X::Vector{<:Real})\n\nTransform the data using the fitted standard scaler.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Vector{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(scaler::StandardScaler, X::Matrix{<:Real})\n\nTransform the data using the fitted standard scaler.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Matrix{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(scaler::MinMaxScaler, X::Vector{<:Real})\n\nTransform the data using the min-max scaler.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Vector{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(scaler::MinMaxScaler, X::Matrix{<:Real})\n\nTransform the data using the min-max scaler.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Matrix{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(scaler::MaxAbsScaler, X::Vector{<:Real})\n\nTransform the data using the max-abs scaler.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Vector{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(scaler::MaxAbsScaler, X::Matrix{<:Real})\n\nTransform the data using the max-abs scaler.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Matrix{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(normalizer::StandardNormalizer, X::Vector{<:Real})\n\nTransform the data using the fitted normalizer.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Vector{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(normalizer::StandardNormalizer, X::Matrix{<:Real})\n\nTransform the data using the fitted normalizer.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Matrix{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(pipeline::Pipeline, X::Matrix{Any})\n\nTransform the input data using the pipeline by applying each step sequentially.\n\nArguments\n\npipeline::Pipeline: The pipeline to use for transformation.\nX::Matrix{Any}: Input data matrix.\n\nReturns\n\nTransformed data matrix.\n\n\n\n\n\n","category":"function"},{"location":"#PreprocessingPipeline.TransformerModule.inverse_transform","page":"Home","title":"PreprocessingPipeline.TransformerModule.inverse_transform","text":"inverse_transform(scaler::StandardScaler, X::Vector{<:Real})\n\nInverse transform the data using the fitted standard scaler.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Vector{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(scaler::StandardScaler, X::Matrix{<:Real})\n\nInverse transform the data using the fitted standard scaler.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Matrix{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(scaler::MinMaxScaler, X::Vector{<:Real})\n\nInverse transform the data using the min-max scaler.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Vector{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(scaler::MinMaxScaler, X::Matrix{<:Real})\n\nInverse transform the data using the min-max scaler.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Matrix{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(scaler::MaxAbsScaler, X::Vector{<:Real})\n\nInverse transform the data using the max-abs scaler.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Vector{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(scaler::MaxAbsScaler, X::Matrix{<:Real})\n\nInverse transform the data using the max-abs scaler.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Matrix{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(normalizer::StandardNormalizer, X::Vector{<:Real})\n\nInverse transform the data using the fitted normalizer.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Vector{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(normalizer::StandardNormalizer, X::Matrix{<:Real})\n\nInverse transform the data using the fitted normalizer.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Matrix{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\n","category":"function"}]
}
