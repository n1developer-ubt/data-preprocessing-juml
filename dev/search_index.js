var documenterSearchIndex = {"docs":
[{"location":"#PreprocessingPipeline","page":"Home","title":"PreprocessingPipeline","text":"","category":"section"},{"location":"#Transformer","page":"Home","title":"Transformer","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Transformer","category":"page"},{"location":"#PreprocessingPipeline.TransformerModule.Transformer","page":"Home","title":"PreprocessingPipeline.TransformerModule.Transformer","text":"Transformer\n\nAbstract type for a step in a pipeline.\n\n\n\n\n\n","category":"type"},{"location":"#Pipeline","page":"Home","title":"Pipeline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pipeline\nadd_step!\nmake_pipeline","category":"page"},{"location":"#PreprocessingPipeline.PipelineModule.Pipeline","page":"Home","title":"PreprocessingPipeline.PipelineModule.Pipeline","text":"struct Pipeline\n\nA structure representing a machine learning pipeline. The pipeline consists of a series of named steps (transformers) applied sequentially to the input data.\n\nFields\n\nnamed_steps::Dict{String, Transformer}: Dictionary of named transformer steps.\nn_features_in_::Int: Number of input features in the dataset.\nfeature_names_in_::Vector{String}: Names of the input features.\n\n\n\n\n\n","category":"type"},{"location":"#PreprocessingPipeline.PipelineModule.add_step!","page":"Home","title":"PreprocessingPipeline.PipelineModule.add_step!","text":"add_step!(pipeline::Pipeline, name::String, step::Transformer)\n\nAdd a transformer step to an existing pipeline.\n\nArguments\n\npipeline::Pipeline: The pipeline to which the step will be added.\nname::String: Name of the transformer step.\nstep::Transformer: The transformer to be added.\n\nReturns\n\nNothing. Modifies the pipeline in place.\n\n\n\n\n\n","category":"function"},{"location":"#PreprocessingPipeline.PipelineModule.make_pipeline","page":"Home","title":"PreprocessingPipeline.PipelineModule.make_pipeline","text":"make_pipeline(steps::Pair{String, Transformer}...)\n\nCreate a pipeline from a sequence of named transformer steps.\n\nArguments\n\nsteps::Pair{String, Transformer}...: Pairs of step names and transformers.\n\nReturns\n\nA new Pipeline instance.\n\n\n\n\n\n","category":"function"},{"location":"#Preprocessing","page":"Home","title":"Preprocessing","text":"","category":"section"},{"location":"#Scaler","page":"Home","title":"Scaler","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"StandardScaler\nMinMaxScaler\nMaxAbsScaler","category":"page"},{"location":"#PreprocessingPipeline.Preprocessing.StandardScaler","page":"Home","title":"PreprocessingPipeline.Preprocessing.StandardScaler","text":"struct StandardScaler\n\nA structure representing a standard scaler.\nThe standard scaler standardizes features by removing the mean.\n\n# Fields\n- `mean::Union{Vector{Float64}, Float64, Nothing}`: Mean of the features.\n- `std::Union{Vector{Float64}, Float64, Nothing}`: Standard deviation of the features.\n\n\n\n\n\n","category":"type"},{"location":"#PreprocessingPipeline.Preprocessing.MinMaxScaler","page":"Home","title":"PreprocessingPipeline.Preprocessing.MinMaxScaler","text":"struct MinMaxScaler\n\nA structure representing a min-max scaler.\nThe min-max scaler scales features to a given range.\nThe range is defined by the `feature_range` parameter.\n\n# Fields\n- `feature_range::Tuple{<:Real, <:Real}`: The range to scale the features to.\n- `min::Union{Vector{<:Real}, <:Real, Nothing}`: Minimum value of the features.\n- `max::Union{Vector{<:Real}, <:Real, Nothing}`: Maximum value of the features.\n\n\n\n\n\n","category":"type"},{"location":"#PreprocessingPipeline.Preprocessing.MaxAbsScaler","page":"Home","title":"PreprocessingPipeline.Preprocessing.MaxAbsScaler","text":"MaxAbsScaler\n\nMax Abs Scaler is a scaler that scales the data using the maximum absolute value of the data.\n\n# Examples\n```julia\nscaler = MaxAbsScaler()\n```\n\n\n\n\n\n","category":"type"},{"location":"#Normalizer","page":"Home","title":"Normalizer","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"StandardNormalizer","category":"page"},{"location":"#PreprocessingPipeline.Preprocessing.StandardNormalizer","page":"Home","title":"PreprocessingPipeline.Preprocessing.StandardNormalizer","text":"StandardNormalizer\n\nStandard Normalizer is a normalizer that normalizes the data using the standard normalization technique.\n\n# Arguments\n- `type::String`: The type of normalization to apply. It can be one of the following:\n    - \"l1\": L1 normalization.\n    - \"l2\": L2 normalization.\n    - \"max\": Max normalization.\n\n# Examples\n```julia\nnormalizer = StandardNormalizer(\"l2\")\n```\n\n\n\n\n\n","category":"type"},{"location":"#Feature-Extraction","page":"Home","title":"Feature Extraction","text":"","category":"section"},{"location":"#Missing-Values","page":"Home","title":"Missing Values","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MissingValueTransformer","category":"page"},{"location":"#PreprocessingPipeline.MissingValue.MissingValueTransformer","page":"Home","title":"PreprocessingPipeline.MissingValue.MissingValueTransformer","text":"MissingValueTransformer(strategy::String=\"drop\", constant_value::Any=nothing)\n\nTransformer for handling missing values using different strategies:\n\n\"drop\": Remove rows with missing values\n\"mean\": Replace with column means\n\"constant\": Replace with specified value\n\n\n\n\n\n","category":"type"},{"location":"#fit!,-transform,-fit*transform!,-inverse*transform","page":"Home","title":"fit!, transform, fittransform!, inversetransform","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"fit!\ntransform\nfit_transform!\ninverse_transform","category":"page"},{"location":"#PreprocessingPipeline.TransformerModule.fit!","page":"Home","title":"PreprocessingPipeline.TransformerModule.fit!","text":"fit!(transformer::Transformer, X::Matrix{Any})\n\nFits the transformer to the given data X. This method should be implemented for any concrete subtype of Transformer.\n\nArguments\n\ntransformer::Transformer: The transformer instance.\nX::Matrix{Any}: The input data to fit the transformer.\n\nReturns\n\nThe fitted transformer.\n\n\n\n\n\nfit!(scaler::MaxAbsScaler, X::Vector{<:Real})\n\nFit the max-abs scaler to the data.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Vector{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `MaxAbsScaler`.\n\n\n\n\n\nfit!(scaler::MaxAbsScaler, X::Matrix{<:Real})\n\nFit the max-abs scaler to the data.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Matrix{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `MaxAbsScaler`.\n\n\n\n\n\nfit!(scaler::MinMaxScaler, X::Vector{<:Real})\n\nFit the min-max scaler to the data.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Vector{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `MinMaxScaler`.\n\n\n\n\n\nfit!(scaler::MinMaxScaler, X::Matrix{<:Real})\n\nFit the min-max scaler to the data.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Matrix{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `MinMaxScaler`.\n\n\n\n\n\nfit!(scaler::StandardScaler, X::Vector{<:Real})\n\nFit the standard scaler to the data.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Vector{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `StandardScaler`.\n\n\n\n\n\nfit!(scaler::StandardScaler, X::Matrix{<:Real})\n\nFit the standard scaler to the data.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Matrix{<:Real}`: The data to fit the scaler.\n\n# Returns\nThe fitted `StandardScaler`.\n\n\n\n\n\nfit!(normalizer::StandardNormalizer, X::Vector{<:Real})\n\nFit the normalizer to the data.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Vector{<:Real}`: The data to fit the normalizer.\n\n# Returns\nThe fitted `StandardNormalizer`.\n\n\n\n\n\nfit!(normalizer::StandardNormalizer, X::Matrix{<:Real})\n\nFit the normalizer to the data.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Matrix{<:Real}`: The data to fit the normalizer.\n\n# Returns\nThe fitted `StandardNormalizer`.\n\n\n\n\n\nfit!(encoder::OneHotEncoder, X::Vector{<:String})\n\nFit the encoder to the data.\n\n# Arguments\n- `encoder::OneHotEncoder`: An instance of `OneHotEncoder`.\n- `X::Vector{<:String}`: The data to fit the encoder.\n\n# Returns\nThe fitted `OneHotEncoder`.\n\n\n\n\n\nfit!(pipeline::Pipeline, X::Matrix{Any})\n\nFit the pipeline to the input data by fitting each step sequentially. Updates the transformers in pipeline.named_steps with the results of their fit! method.\n\nArguments\n\npipeline::Pipeline: The pipeline to fit.\nX::Matrix{Any}: Input data matrix.\n\nReturns\n\nThe updated pipeline.\n\n\n\n\n\n","category":"function"},{"location":"#PreprocessingPipeline.TransformerModule.transform","page":"Home","title":"PreprocessingPipeline.TransformerModule.transform","text":"transform(transformer::Transformer, X::Matrix{Any})\n\nApplies the transformation defined by the transformer to the input data X. This method should be implemented for any concrete subtype of Transformer.\n\nArguments\n\ntransformer::Transformer: The transformer instance.\nX::Matrix{Any}: The input data to transform.\n\nReturns\n\nA transformed version of X.\n\n\n\n\n\ntransform(scaler::MaxAbsScaler, X::Vector{<:Real})\n\nTransform the data using the max-abs scaler.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Vector{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(scaler::MaxAbsScaler, X::Matrix{<:Real})\n\nTransform the data using the max-abs scaler.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Matrix{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(scaler::MinMaxScaler, X::Vector{<:Real})\n\nTransform the data using the min-max scaler.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Vector{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(scaler::MinMaxScaler, X::Matrix{<:Real})\n\nTransform the data using the min-max scaler.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Matrix{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(scaler::StandardScaler, X::Vector{<:Real})\n\nTransform the data using the fitted standard scaler.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Vector{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(scaler::StandardScaler, X::Matrix{<:Real})\n\nTransform the data using the fitted standard scaler.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Matrix{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(normalizer::StandardNormalizer, X::Vector{<:Real})\n\nTransform the data using the fitted normalizer.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Vector{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(normalizer::StandardNormalizer, X::Matrix{<:Real})\n\nTransform the data using the fitted normalizer.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Matrix{<:Real}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(encoder::OneHotEncoder, X::Vector{<:String})\n\nTransform the data using the encoder.\n\n# Arguments\n- `encoder::OneHotEncoder`: An instance of `OneHotEncoder`.\n- `X::Vector{<:String}`: The data to transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\ntransform(pipeline::Pipeline, X::Matrix{Any})\n\nTransform the input data using the pipeline by applying each step sequentially.\n\nArguments\n\npipeline::Pipeline: The pipeline to use for transformation.\nX::Matrix{Any}: Input data matrix.\n\nReturns\n\nTransformed data matrix.\n\n\n\n\n\n","category":"function"},{"location":"#PreprocessingPipeline.TransformerModule.fit_transform!","page":"Home","title":"PreprocessingPipeline.TransformerModule.fit_transform!","text":"Fits the transformer to the given data X and then also applies the transformation. This method should be implemented for any concrete subtype of Transformer.\n\nArguments\n\ntransformer::Transformer: The transformer instance.\nX::Matrix{Any}: The input data to fit the transformer.\n\nReturns\n\nA transformed version of X.\n\n\n\n\n\nfit_transform!(scaler::MinMaxScaler, X::Vector{<:Real})\n\nFit and transform the data using the min-max scaler.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Vector{<:Real}`: The data to fit and transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\nfit_transform!(scaler::MinMaxScaler, X::Matrix{<:Real})\n\nFit and transform the data using the min-max scaler.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Matrix{<:Real}`: The data to fit and transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\nfit_transform!(scaler::StandardScaler, X::Vector{<:Real})\n\nFit and transform the data using the standard scaler.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Vector{<:Real}`: The data to fit and transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\nfit_transform!(scaler::StandardScaler, X::Matrix{<:Real})\n\nFit and transform the data using the standard scaler.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Matrix{<:Real}`: The data to fit and transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\nfit_transform!(normalizer::StandardNormalizer, X::Vector{<:Real})\n\nFit and transform the data using the normalizer.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Vector{<:Real}`: The data to fit and transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\nfit_transform!(normalizer::StandardNormalizer, X::Matrix{<:Real})\n\nFit and transform the data using the normalizer.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Matrix{<:Real}`: The data to fit and transform.\n\n# Returns\nThe transformed data.\n\n\n\n\n\nfit_transform!(encoder::OneHotEncoder, X::Vector{<:String}, y::Vector{Any})\n\nFit the encoder to the data and transform the data.\n\n# Arguments\n- `encoder::OneHotEncoder`: An instance of `OneHotEncoder`.\n- `X::Vector{<:String}`: The data to fit and transform.\n- `y::Vector{Any}`: The target data.\n\n# Returns\nThe transformed data.\n\n\n\n\n\nfit_transform!(pipeline::Pipeline, X::Matrix)\n\nFit the pipeline to the data and transform it in one step.\n\nArguments\n\npipeline::Pipeline: The pipeline to fit and transform.\nX::Matrix{Any}: Input data matrix.\n\nReturns\n\nTransformed data matrix.\n\n\n\n\n\n","category":"function"},{"location":"#PreprocessingPipeline.TransformerModule.inverse_transform","page":"Home","title":"PreprocessingPipeline.TransformerModule.inverse_transform","text":"inverse_transform(scaler::MaxAbsScaler, X::Vector{<:Real})\n\nInverse transform the data using the max-abs scaler.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Vector{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(scaler::MaxAbsScaler, X::Matrix{<:Real})\n\nInverse transform the data using the max-abs scaler.\n\n# Arguments\n- `scaler::MaxAbsScaler`: An instance of `MaxAbsScaler`.\n- `X::Matrix{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(scaler::MinMaxScaler, X::Vector{<:Real})\n\nInverse transform the data using the min-max scaler.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Vector{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(scaler::MinMaxScaler, X::Matrix{<:Real})\n\nInverse transform the data using the min-max scaler.\n\n# Arguments\n- `scaler::MinMaxScaler`: An instance of `MinMaxScaler`.\n- `X::Matrix{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(scaler::StandardScaler, X::Vector{<:Real})\n\nInverse transform the data using the fitted standard scaler.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Vector{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(scaler::StandardScaler, X::Matrix{<:Real})\n\nInverse transform the data using the fitted standard scaler.\n\n# Arguments\n- `scaler::StandardScaler`: An instance of `StandardScaler`.\n- `X::Matrix{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(normalizer::StandardNormalizer, X::Vector{<:Real})\n\nInverse transform the data using the fitted normalizer.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Vector{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform(normalizer::StandardNormalizer, X::Matrix{<:Real})\n\nInverse transform the data using the fitted normalizer.\n\n# Arguments\n- `normalizer::StandardNormalizer`: An instance of `StandardNormalizer`.\n- `X::Matrix{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\ninverse_transform!(encoder::OneHotEncoder, X::Matrix{<:Real})\n\nInverse transform the data using the encoder.\n\n# Arguments\n- `encoder::OneHotEncoder`: An instance of `OneHotEncoder`.\n- `X::Matrix{<:Real}`: The data to inverse transform.\n\n# Returns\nThe inverse transformed data.\n\n\n\n\n\n","category":"function"}]
}
